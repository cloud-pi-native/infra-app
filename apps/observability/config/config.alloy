prometheus.remote_write "default" {
  endpoint {
      url = "{{ .Values.global.metrics }}/api/v1/push"
      headers = {
      "X-Scope-OrgID" = "prod-infra",
      }
  }
}

prometheus.operator.servicemonitors "services" {
  forward_to = [prometheus.remote_write.default.receiver]
}

{{- if .Values.global.alert }}
mimir.rules.kubernetes "prod_infra" {
  address = {{ .Values.global.metrics | quote }}
  tenant_id = "prod-infra"
  rule_selector { 
    match_labels = {
      "type" = "metrics",
    }
  }
}

loki.rules.kubernetes "prod_infra" {
  address = {{ .Values.global.logs | quote }}
  tenant_id = "prod-infra"
  rule_selector { 
    match_labels = {
      "type" = "logs",
    }
  }
}

{{- range $tenant := default .Values.tenants $.Values.global.tenants }}
mimir.rules.kubernetes {{ regexReplaceAll "\\W+" $tenant.name "_" | quote }} {
  address = {{ .Values.global.metrics | quote }}
  tenant_id = {{ $tenant.name | quote }}
  rule_selector {
    match_labels = {
      "type" = "metrics",
      "dso/project" = {{ regexFind "[^-]+$"  $tenant.name | quote }},
    }
  }
  rule_selector { 
    match_expression = {
      "key" = "dso/env",
      {{- if hasPrefix "prod-" $tenant.name }}
      "operator" = "in",
      {{- else }}
      "operator" = "notin",
      {{- end }}
      "values" = ["prod"],
    }
  }
}

loki.rules.kubernetes {{ regexReplaceAll "\\W+" $tenant.name "_" | quote }} {
  address = {{ .Values.global.logs | quote }}
  tenant_id = {{ $tenant.name | quote }}
  rule_selector { 
    match_labels = {
      "type" = "logs",
      "dso/project" = {{ regexFind "[^-]+$" $tenant.name | quote }},
    }
  }

  rule_selector { 
    match_expression = {
      "key" = "dso/env",
      {{- if hasPrefix "prod-" $tenant.name }}
      "operator" = "in",
      {{- else }}
      "operator" = "notin",
      {{- end }}
      "values" = ["prod"],
    }
  }
}
{{- end }}

discovery.kubernetes "pods" {
  role = "pod"
  selectors {
    role = "pod"
    field = "spec.nodeName=" + env("HOSTNAME")
  }
}

discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pods.targets
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }
  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
    separator = "/"
    action = "replace"
    replacement = "$1"
    target_label = "job"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    regex         = "(.+)"
    target_label  = "app_kubernetes_io_name"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_logs_job"]
    regex         = "(.+)"
    target_label  = "job"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    separator = "/"
    action = "replace"
    replacement = "/var/log/pods/*$1/*.log"
    target_label = "__path__"
  }

  // set the container runtime as a label
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_pod_container_id"]
    regex = "^(\\S+):\\/\\/.+$"
    replacement = "$1"
    target_label = "tmp_container_runtime"
  }
}

discovery.relabel "filtered_pod_logs" {
  targets = discovery.relabel.pod_logs.output
  rule {  // Drop anything with a "falsy" annotation value
    source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_logs_autogather"]
    regex = "(false|no|skip)"
    action = "drop"
  }
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_namespace"]
    target_label = "tenant" 
  }
  rule {
    action = "replace"
    source_labels = ["tenant"]
    target_label = "tenant"
    regex = "^(infra-|openshift-|kube-|default$).*"
    replacement = "{{ .Values.global.env }}-infra"
  }
  rule {
    action = "replace"
    source_labels = ["tenant"] 
    target_label = "tenant"
    regex = "^dso-.*"
    replacement = "{{ .Values.global.env }}-dso"
  }
  rule {
    action = "replace" 
    source_labels = ["tenant"]
    target_label = "tenant" 
    regex = "(\\w+)-(.*)-(\\w+-\\w+)"
    replacement = "prod-${2}"
  }
}

local.file_match "pod_logs" {
  path_targets = discovery.relabel.filtered_pod_logs.output
}

loki.source.file "pod_logs" {
  targets    = local.file_match.pod_logs.targets
  forward_to = [loki.process.pod_logs.receiver]
}

loki.process "pod_logs" {
  stage.match {
    selector = "{tmp_container_runtime=~\"containerd|cri-o\"}"
    // the cri processing stage extracts the following k/v pairs: log, stream, time, flags
    stage.cri {}

    // Set the extract flags and stream values as labels
    stage.labels {
      values = {
        flags  = "",
        stream  = "",
      }
    }
  }

  stage.match {
    selector = "{tmp_container_runtime=\"docker\"}"
    // the docker processing stage extracts the following k/v pairs: log, stream, time
    stage.docker {}

    // Set the extract stream value as a label
    stage.labels {
      values = {
        stream  = "",
      }
    }
  }

  // Move high-cardinality labels to structured metadata
  stage.structured_metadata {
    values = {
      pod  = "",
    }
  }

  // Drop the filename label, since it's not really useful in the context of Kubernetes, where we already have cluster,
  // namespace, pod, and container labels. Drop the pod label, which is in structured metadata. Also drop the temporary
  // container runtime label as it is no longer needed.
  stage.label_drop {
    values = ["filename", "pod", "tmp_container_runtime", "service_name", "component"]
  }
  stage.tenant {
    label = "tenant"
  }
  forward_to = [loki.process.logs_service.receiver]
}

loki.process "logs_service" {
  stage.static_labels {
      values = {
        cluster = {{ .Values.global.cluster | quote }},
      }
  }
  forward_to = [loki.write.logs_service.receiver]
}

// Loki
loki.write "logs_service" {
  endpoint {
    url = "{{ .Values.global.logs }}/loki/api/v1/push"
    tenant_id = "default"
  }
  external_labels = {
    cluster = {{ .Values.global.cluster | quote }},
  }
}